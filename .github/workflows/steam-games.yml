name: Steam Games Collection

on:
  schedule:
    - cron: '23 3 * * *'  # Run at 3:23 UTC every day
  workflow_dispatch: # Allow manual trigger

jobs:
  collect-games:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
    
    - name: Collect Steam games
      run: |
        # First get the Steam data
        python << 'EOF'
        import requests
        import json
        
        def get_steam_data():
            try:
                print("Fetching Steam data...")
                response = requests.get('https://store.steampowered.com/api/featuredcategories')
                if response.status_code == 200:
                    data = response.json()
                    
                    # Write new games to a temporary file
                    with open('new_games', 'w', encoding='utf-8') as f:
                        for category_key, category_data in data.items():
                            if isinstance(category_data, dict):
                                if 'items' in category_data:
                                    for item in category_data.get('items', []):
                                        if isinstance(item, dict):
                                            name = item.get('name', '').strip()
                                            if name:
                                                f.write(f"{name}\n")
                                            headline = item.get('headline', '').strip()
                                            if headline:
                                                f.write(f"{headline}\n")
                    
                    print("Successfully wrote new games to temporary file")
                    return True
                else:
                    print(f"Error: Status code {response.status_code}")
                    return False
        
            except requests.exceptions.RequestException as e:
                print(f"Network error collecting Steam data: {str(e)}")
                return False
            except Exception as e:
                print(f"Error collecting Steam data: {str(e)}")
                return False
        
        # Run the collection
        get_steam_data()
        EOF
        
        # Process files using bash
        echo "Processing files..."
        
        # Function to process text files
        process_file() {
            local input=$1
            local base=${input%.*}
            
            echo "Processing $input..."
            
            # Create variations
            awk '{print tolower($0)}' "$input" > "${base}_lower"
            awk '{print toupper($0)}' "$input" > "${base}_upper"
            sed "s/ //g" "$input" > "${base}_nospaces"
            sed "s/-//g" "$input" > "${base}_nodash"
            sed "s/'//g" "$input" > "${base}_quote"
            
            # Handle accents
            iconv -f UTF-8 -t ASCII//TRANSLIT "$input" "${base}_lower" "${base}_quote" "${base}_upper" "${base}_nodash" "${base}_nospaces" > "${base}_noaccent" 2>/dev/null || echo "Warning: Some accent conversions failed"
            
            # Create additional permutations
            # First letter uppercase
            awk '{print toupper(substr($0,1,1)) substr($0,2)}' "$input" > "${base}_titlecase"
            # First letter of each word uppercase
            awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)}1' "$input" > "${base}_propercase"
            # Remove special characters
            sed 's/[^a-zA-Z0-9]//g' "$input" > "${base}_alphanum"
            # Replace spaces with common separators
            sed 's/ /_/g' "$input" > "${base}_underscore"
            sed 's/ /-/g' "$input" > "${base}_hyphen"
            sed 's/ /./g' "$input" > "${base}_dot"
            
            # Print statistics for this file
            echo "Statistics for $input:"
            echo "Original lines: $(wc -l < "$input")"
            echo "Unique lines: $(sort -u "$input" | wc -l)"
            echo "Average length: $(awk '{sum+=length($0)} END {print sum/NR}' "$input")"
            echo "Max length: $(awk '{if(length($0)>max) max=length($0)} END {print max}' "$input")"
            echo "Min length: $(awk 'NR==1{min=length($0)} {if(length($0)<min) min=length($0)} END {print min}' "$input")"
            echo "---"
        }
        
        # Process the new games file
        process_file "new_games"
        
        # Combine all variations
        cat new_games* >> new_games_combined
              
        # Combine files, sort, and remove duplicates
        cat videogames new_games_combined | sort -u > videogames.new
        
        # Replace the original file
        mv videogames.new videogames
        
        # Print overall statistics
        echo "Overall Statistics:"
        echo "Total unique entries: $(cat videogames | sort -u | wc -l)"
        echo "Total entries with variations: $(cat videogames | wc -l)"
        echo "Most common patterns:"
        cat videogames | sort | uniq -c | sort -nr | head -n 10
        echo "---"
        
        # Clean up temporary files
        rm new_games* new_games_combined
    
    - name: Commit and push changes
      run: |
        git config user.name "Steam-bot"
        git config user.email ""
        git add videogames
        git commit -m "[Bot] Update videogames list - $(date -u '+%Y-%m-%d %H:%M:%S UTC')" || echo "No changes to commit"
        git push 
